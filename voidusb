#!/bin/bash
_root=$(pwd)
ins="xbps-install -y"
set -e # stop script at error, useful for debugging
def="\e[0m"
grn="\e[1;34m"

#make sure the functions get loaded first for the run flag
function depchecker {
		deps="mkfs.fat mkfs.ext4 mkfs.f2fs curl tar sfdisk xz"
		for n in $deps; do
				if ! command -v $n &> /dev/null; then
						echo -e "${grn}${n} could not be found. Install it through your package manager.${def}"
						exit 0
				fi
		done
		if ! command -v xbps-install &> /dev/null; then
				echo "XBPS not found, using tarball"
				xbpsins="false"
		else
				echo "XBPS found, using XBPS"
				xbpsins="true"
		fi
}

function usbchk {
		file -s "${_device}1" > .voidusb #i cannot get bash to get it to work while set as a variable
		file -s "${_device}2" >> .voidusb #an additional check for partition 2 just to be sure
		stat=$(cat .voidusb)
		if [[ $stat = *"no read permission"* ]]; then
				echo -e "${grn}Device $_device contains data. Is this the correct device?${def}"
				rm .voidusb
				exit 0
		fi
		rm .voidusb
}

function partition {
		echo 'label: gpt' | sudo sfdisk -q $_device
		echo '${_device}1: start=2048, size=262144, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,bootable, name="EFI"' >> .voidusb #EFI boot partition
		echo '${_device}2: start=264192, size=786432, type=L, name="Boot"' >> .voidusb #boot partition as grub does not like f2fs with compression
		echo '${_device}3: start=1050624,type=L, name="Root"' >> .voidusb #rest as /
		sudo sfdisk -q $_device < .voidusb #i think this is the only way sfdisk works
		rm .voidusb
		sudo mkfs.fat -F32 ${_device}1
		sudo mkfs.ext4 -F -q ${_device}2
		sudo mkfs.f2fs -f -q -O extra_attr,inode_checksum,sb_checksum,compression ${_device}3 #https://wiki.archlinux.org/title/F2FS#Compression, will give us a performance increase and reduce wear on the USB
}

function mountusb {
		mkdir -p void
		sudo mount -o compress_algorithm=zstd:9,compress_chksum,whint_mode=fs-based,atgc,gc_merge,lazytime ${_device}3 ./void
		sudo mkdir -p ./void/boot
		sudo mount ${_device}2 ./void/boot
		sudo mkdir -p ./void/boot/efi
		sudo mount ${_device}1 ./void/boot/efi
}

function tarstrap { #anyone want to add an option to install via XBPS for people who can install xbps? i done it wooooooooooooooooooooooo
		#install void via rootfs
		if [ "$_libc" = glibc ]; then
				tarname=void-x86_64-ROOTFS-20210930.tar.xz
		else #select musl if glibc is not selected
				tarname=void-x86_64-musl-ROOTFS-20210930.tar.xz
		fi
		echo -e "${grn}Downloading Void ROOTFS...${def}" && cd void
		sudo curl -O https://alpha.de.repo.voidlinux.org/live/current/$tarname
		sudo tar xpf $tarname --xattrs-include='*.*' --numeric-owner #https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Unpacking_the_stage_tarball
		sudo rm $tarname
}

function xbpsstrap {
		if [ "$_libc" = "musl" ]; then
				XBPS_ARCH=x86_64-musl
				REPO=https://alpha.de.repo.voidlinux.org/current/musl
		else
				XBPS_ARCH=x86_64
				REPO=https://alpha.de.repo.voidlinux.org/current
		fi
		xbps-install -S -r ./void -R "$REPO" base-system void-repo-nonfree
		touch ./void/xbps # the system will check after a chroot to see it was installed with xbps or not
}

function prepchroot {
		sudo cp --dereference /etc/resolv.conf ./etc/resolv.conf
		sudo mount --types proc /proc ./proc
		sudo mount --rbind /sys ./sys
		sudo mount --rbind /dev ./dev
		sudo cp ../voidusb ./tmp/voidusb
		sudo cp ../voidusb.conf ./tmp/voidusb.conf
}

function tarchroot { # want this separate in case of XBPS install method
		$ins -Su xbps
		$ins -u
		$ins base-system void-repo-nonfree
		xbps-remove -y base-voidstrap
}

function localisation {
		if [ "$_libc" = "glibc" ]; then # locale setup
				echo "${_locale}.UTF-8 UTF-8" >> /etc/default/libc-locales
				xbps-reconfigure -f glibc-locales
		fi
		echo $_hostname > /etc/hostname
		echo "LANG=${_locale}.UTF-8" > /etc/locale.conf # idk if this has an effect on musl but eh
		ln -sf /usr/share/zoneinfo/$timez /etc/localtime
		if [ "$_clock" = "NTP" ]; then
				echo "HARDWARECLOCK=localtime" >> /etc/rc.conf # as a backup
				$ins openntpd
				ln -s /etc/sv/ntpd /var/service
		elif [ "$_clock" = "localtime" ]; then
				echo "HARDWARECLOCK=localtime" >> /etc/rc.conf
		fi
}

function bootloader {
		$ins grub-x86_64-efi
		grub-install --target=x86_64-efi --boot-directory=/boot --efi-directory=/boot/efi --removable --bootloader-id="voidUSB"
		grub-mkconfig -o /boot/grub/grub.cfg
}

function mkfstab {
		sudo curl -O -s https://raw.githubusercontent.com/rangerAMG/genfstab/master/genfstab
		sudo chmod +x genfstab
		sudo bash -c "cd ${_root} && ./void/genfstab -U ./void >> ./void/etc/fstab"
}

function shell {
		if [ "$_shell" = "fish" ]; then
				$ins fish-shell
		else
				$ins $_shell
		fi	
		chsh -s $(command -v ${_shell})
}

function usercreation {
		echo -e "${grn}Creating user.${def}"
		useradd -s $_shell -G video,wheel,audio,input,cdrom $_user
		echo -e "${grn}Password for ${_realuser}?${def}"
		passwd $_user
		echo -e "${grn}Adding sudoers rules for user${def}"
		sed -Ei 's/^#(%wheel.*ALL.*)/\1/' /etc/sudoers # this actually works for some reason
}

function drivers {
		if [ "$_dri" = "intel" ]; then
				$ins mesa-dri vulkan-loader mesa-vulkan-intel intel-video-accel	intel-ucode
		elif [ "$_dri" = "amd" ]; then
				$ins mesa-dri vulkan-loader mesa-vulkan-radeon xf86-video-amdgpu xf86-video-ati mesa-vaapi mesa-vdpau
		elif [ "$_dri" = "nvidia-prop" ]; then # so no card detection yet for older drivers which perform better on different cards but maybe later
				$ins nvidia
				if [ "$_libc" = "glibc" ]; then
						$ins nvidia-libs-32bit
				fi
		elif [ "$_dri" = "nvidia" ]; then 
				$ins mesa-dri xf86-video-nouveau
				if [ "$_libc" = "glibc" ]; then
						$ins mesa-dri-32bit
				fi
		else
				echo -e "${grn}Driver was not selected/chosen correctly, skipping...${def}"
		fi
}

function gui {
		$ins curl wget lightdm lightdm-gtk3-greeter xorg budgie-desktop tilix nemo elogind xdg-user-dirs-gtk gnome-control-center pipewire wireplumber alsa-pipewire bluez papirus-icon-theme papirus-folders
		rm /etc/runit/runsvdir/default/dhcpcd #just incase
		mkdir -p /etc/pipewire
		curl -0 -s https://raw.githubusercontent.com/rangerAMG/voidUSB/files/pipewire.conf && mv pipewire.conf /etc/pipewire/
		curl -0 -s https://raw.githubusercontent.com/rangerAMG/voidUSB/files/pipewire.desktop && mv pipewire.desktop /etc/xdg/autostart/
		services="elogind lightdm bluetoothd NetworkManager dbus"
		for n in $services; do
			ln -s /etc/sv/${n} /etc/runit/runsvdir/default/
		done
		wget -q https://github.com/rangerAMG/voidUSB/releases/download/v1.0-beta/Juno-ocean-v40.tar.xz # i give up on curl and this file exactly
		tar xpf Juno-ocean-v40.tar.xz -C /usr/share/themes/ && rm Juno-ocean-v40.tar.xz
		su -c "gsettings set org.gnome.desktop.interface gtk-theme 'Juno-ocean-v40' && gsettings set org.gnome.desktop.wm.preferences theme 'Juno-ocean-v40' && gsettings set org.gnome.desktop.interface icon-theme 'Papirus-Dark'" $_user
		ln -s /usr/share/fontconfig/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d/
		xbps-reconfigure -f fontconfig
}

if [ "$1" != "chroot" ]; then
		grn="e[1;32m"
		source voidusb.conf
		if [ "$1" = "run" ]; then
				$2
				exit 0
		fi
		echo -e "${grn}Welcome to voidUSB!"
		if [ $_conf = false ]; then
				echo -e "${def}To start off, edit the voidusb.conf file to your liking.${def}"
				exit 0
		fi
fi

if [ "$1" = "chroot" ]; then
		source /tmp/voidusb.conf
		echo -e "${grn}Chroot entered, create a password for root.${def}"
		passwd
		if [ "$_cruser" = "true" ]; then
				usercreation
		fi
		echo -e "${grn}Setting up system.${def}"
		if ! rm xbps &> /dev/null; then 
				tarchroot
		fi
		localisation
		drivers
		if [ "$_gui" = "true" ]; then
				gui
		fi
		bootloader
		$ins ${_pkgs} neofetch
		xbps-reconfigure -fa
		echo -e "${grn}Setup complete, voidUSB has been successfully installed on ${_device}!${def}"
		neofetch
else
		depchecker
		echo -e "${grn}Checking if dependencies are installed...${def}"
		usbchk
		echo -e "${grn}Partitioning USB... Password prompt incoming!${def}"
		partition
		echo -e "${grn}Partitions prepared."
		echo -e "Mounting devices...${def}"
		mountusb
		if [ "$xbpsins" = "true" ]; then
				echo -e "${grn}Bootstrapping a Void Linux installation to /dev/${_device}..."
				xbpsstrap
		else
				echo -e "${grn}Bootstrapping Void Linux tarball..."
				tarstrap
		fi
		echo -e "${grn}Generating fstab...${def}"
		mkfstab
		echo -e "${grn}Preparing a chroot environment...${def}"
		prepchroot
		echo -e "${grn}Stage 1 complete, relaunching script in chroot mode...${def}"
		sudo chroot ./ ./tmp/voidusb chroot
fi
